{"version":3,"sources":["components/header/Header.js","components/currency_exchange/CurrencyExchange.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CurrencyExchange","currencyData","isListLoading","useState","currencyFrom","setCurrencyFrom","currencyTo","setCurrencyTo","exchangeValue","setExchangeValue","enteredValue","setEnteredValue","isLoading","setLoading","swapCurrency","temp","useEffect","url","process","fetch","then","response","json","catch","err","console","error","finally","color","size","value","onChange","event","target","Object","keys","map","key","type","placeholder","onClick","App","setCurrencyData","setIsListLoading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ec2c455.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nexport default function Header() {\r\n\treturn(\r\n\t\t<nav className='custom'>\r\n\t\t\t<div className='custom nav-wrapper white'>\r\n\t\t\t\t<div className='center'>\r\n\t\t\t\t\t<span className='text flow-text'>CURRENCY CONVERTOR</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Facebook } from 'react-spinners-css'\r\nimport './CurrencyExchange.css'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\n\r\nexport default function CurrencyExchange({ currencyData, isListLoading }) {\r\n\r\n\tconst [currencyFrom, setCurrencyFrom] = useState('INR')\r\n\tconst [currencyTo, setCurrencyTo] = useState('INR')\r\n\tconst [exchangeValue, setExchangeValue] = useState(1)\r\n\tconst [enteredValue, setEnteredValue] = useState(1)\r\n\tconst [isLoading, setLoading] = useState(true)\r\n\r\n\r\n\tconst swapCurrency = () => {\r\n\t\tconst temp = currencyFrom;\r\n\t\tsetCurrencyFrom(currencyTo);\r\n\t\tsetCurrencyTo(temp);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetEnteredValue(1)\r\n\t\tsetLoading(true);\r\n\t\tlet url = `https://${process.env.REACT_APP_CURRENCY_CONVERSION_API_HOST}/convert?from=${currencyFrom}&to=${currencyTo}&amount=${enteredValue}`\r\n\t\tfetch(url, {\r\n\t\t\t\"method\": \"GET\",\r\n\t\t\t\"headers\": {\r\n\t\t\t\t\"x-rapidapi-host\": `${process.env.REACT_APP_CURRENCY_CONVERSION_API_HOST}`,\r\n\t\t\t\t\"x-rapidapi-key\": `${process.env.REACT_APP_CURRENCY_CONVERSION_API_KEY}`\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tsetExchangeValue(response['result']);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}).finally(() => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t});\r\n\r\n\t}, [currencyFrom, currencyTo])\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<div className='card container'>\r\n\t\t\t\t<div className='row'>\r\n\t\t\t\t\t<div className='col s12 l5'>\r\n\t\t\t\t\t\t<div className='hide-on-med-and-up'>\r\n\t\t\t\t\t\t\t<label className='flow-text text' >Converted Currency </label>\r\n\t\t\t\t\t\t\t{(isLoading || isListLoading) ? <div className='center loading'><Facebook color='purple' size='5vmax' /></div> :\r\n\t\t\t\t\t\t\t\t<div className='flow-text center black-text'>{exchangeValue * enteredValue}</div>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<label className='flow-text text'>From</label>\r\n\t\t\t\t\t\t<div className='input-field'>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tclassName='browser-default'\r\n\t\t\t\t\t\t\t\tvalue={currencyFrom}\r\n\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\tsetCurrencyFrom(event.target.value)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{Object.keys(currencyData).map((key) =>\r\n\t\t\t\t\t\t\t\t\t<option\r\n\t\t\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\t\t\tvalue={key}>\r\n\t\t\t\t\t\t\t\t\t\t{currencyData[key]}\r\n\t\t\t\t\t\t\t\t\t</option>)}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<p className='grey-text flow-text middle-text'>Selected currency: {currencyFrom}</p>\r\n\t\t\t\t\t\t<label className='flow-text text'>Enter amount</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName='input-field'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tvalue={enteredValue}\r\n\t\t\t\t\t\t\tplaceholder='Enter a number eg: 1'\r\n\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\tsetEnteredValue(event.target.value)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='col hide-on-med-and-down center swap'>\r\n\t\t\t\t\t\t<i className=\"material-icons btn-floating black-text white small center swap-icon\"\r\n\t\t\t\t\t\t\tonClick={swapCurrency}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tswap_horiz\r\n\t\t\t\t\t\t</i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='col hide-on-large-only center swap'>\r\n\t\t\t\t\t\t<i className=\"material-icons btn-floating black-text white small center swap-icon\"\r\n\t\t\t\t\t\t\tonClick={swapCurrency}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tswap_vert\r\n\t\t\t\t\t\t</i>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className='col s12 l5 right'>\r\n\t\t\t\t\t\t<label className='flow-text text'>To </label>\r\n\t\t\t\t\t\t<div className='input-field'>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tclassName='browser-default'\r\n\t\t\t\t\t\t\t\tvalue={currencyTo}\r\n\t\t\t\t\t\t\t\tonChange={(event) => setCurrencyTo(event.target.value)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{Object.keys(currencyData).map((key) =>\r\n\t\t\t\t\t\t\t\t\t<option\r\n\t\t\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\t\t\tvalue={key}>\r\n\t\t\t\t\t\t\t\t\t\t{currencyData[key]}\r\n\t\t\t\t\t\t\t\t\t</option>)}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className='grey-text middle-label'>Selected currency: {currencyTo}</p>\r\n\t\t\t\t\t\t<div className='hide-on-small-only'>\r\n\t\t\t\t\t\t\t<label className='flow-text text' >Converted Currency </label>\r\n\t\t\t\t\t\t\t{(isLoading || isListLoading) ? <div className='center loading'><Facebook color='purple' size='5vmax' /></div> :\r\n\t\t\t\t\t\t\t\t<div className='flow-text center black-text'>{exchangeValue * enteredValue}</div>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState, useEffect} from 'react'\r\nimport './app.css'\r\nimport Header from './components/header/Header'\r\nimport CurrencyExchange from './components/currency_exchange/CurrencyExchange'\r\n\r\nexport default function App() {\r\n\r\n  const [currencyData, setCurrencyData] = useState({});\r\n  const [isListLoading, setIsListLoading] = useState(true)\r\n\r\n  useEffect( () => {\r\n    setIsListLoading(true);\r\n    let url = `https://${process.env.REACT_APP_CURRENCY_CONVERSION_API_HOST}/symbols`\r\n    fetch(url, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-host\": `${process.env.REACT_APP_CURRENCY_CONVERSION_API_HOST}`,\r\n            \"x-rapidapi-key\": `${process.env.REACT_APP_CURRENCY_CONVERSION_API_KEY}`\r\n          }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n          setCurrencyData(response['symbols']);\r\n          setIsListLoading(false)\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n        }\r\n    );\r\n\r\n  },[])\r\n\r\n  return (\r\n    <div className='main-container'>\r\n      <Header />\r\n      <CurrencyExchange currencyData={currencyData} isListLoading={isListLoading}/>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}